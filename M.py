# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd # call the file and  it can edit the coloums or rows
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score

import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("Mall_Customers.csv")
print("Dataset Head: ")
print(df.head())
print("\nDataset Info: ")
print(df.info())
print("\nDataset Description: ")
print(df.describe())

X= df[['Annual Income (k$)','Spending Score (1-100)']].values # select the featuers

scaler = StandardScaler() # preprocess the data based of K means algorithm
X_scaled = scaler.fit_transform(X)

wcss =[] # find the optimal number of cluster based of the elbow method
silhouette_scores = []
k_range = range(2,11)
for k in k_range:
  Kmeans = KMeans(n_clusters=k,init='k-means++',random_state=42,n_init=10)
  Kmeans.fit(X_scaled)
  wcss.append(Kmeans.inertia_)
  if k >= 2:
    score=silhouette_score(X_scaled,Kmeans.labels_)
    silhouette_scores.append(score)

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.plot(k_range,wcss,marker='o')
plt.title('Elbow Method')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('WCSS')
plt.xticks(k_range)

plt.subplot(1,2,2)
plt.plot(range(2,11),silhouette_scores,marker='o',color='green') #  choose the higest
plt.title('Silhouette Score')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.xticks(k_range)

plt.tight_layout()
plt.show()

optimal_k = 5
kmeans_final=KMeans(n_clusters=optimal_k,init='k-means++',random_state=42,n_init=10)
y_kmeans=kmeans_final.fit_predict(X_scaled)

plt.figure(figsize=(10,6))
scatter = plt.scatter(X_scaled[:,0],X_scaled[:,1],c=y_kmeans,s=50,cmap='viridis',alpha=0.8)
centers = kmeans_final.cluster_centers_
plt.scatter(centers[:,0],centers[:,1],c='red',s=200,alpha=0.9,marker = 'X',label='Centroids')
plt.title('Clusters of Customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.colorbar(scatter,label='Cluster Label')
plt.show()

df['Cluster']= y_kmeans

print("\nCluster Analysis - Mean Values: ")
cluster_means = df.groupby('Cluster')[['Age','Annual Income (k$)','Spending Score (1-100)']].mean()
print(cluster_means)

print('\nNumber of Customers in Each Cluster: ')
print(df['Cluster'].value_counts().sort_index())

print("\nGender Distribution in Each Cluster:" )
print(df.groupby('Cluster')['Gender'].value_counts())

print("\n=== CLUSTER PROFILES===")
for cluster_id in range(optimal_k):
  cluster_data = df[df['Cluster']==cluster_id]
  print(f"\nCluster {cluster_id} ({len(cluster_data)})customers): ")
  print(f"- Average Age: {cluster_data['Age'].mean():.1f} years")
  print(f"- Average Annual Income: ${cluster_data['Annual Income (k$)'].mean():.1f}/100")
  print(f"- Average Spending Score {cluster_data['Spending Score (1-100)'].mean():.1f}/100")
  print(f"- Gender Distribution: {cluster_data['Gender'].value_counts()}")

centers_original_scale = scaler.inverse_transform(kmeans_final.cluster_centers_)
print("\nCluster Centers (Original Scale): ")
centers_df = pd.DataFrame(centers_original_scale,columns=['Annual Income (k$)','Spending Score (1-100)'])
print(centers_df)

plt.figure(figsize=(10,6))
colors = ['purple', 'orange', 'green', 'blue', 'brown']
for i in range(optimal_k):
  plt.scatter(df[df['Cluster'] == i]['Annual Income (k$)'], df[df['Cluster'] == i]['Spending Score (1-100)'], s=50, c=colors[i], label=f'Cluster {i}', alpha = 0.7)


plt.scatter(centers_df['Annual Income (k$)'], centers_df['Spending Score (1-100)'], c='red', s=200, marker='X', label= 'Centroids')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.grid(True, alpha = 0.3)
plt.show()