# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import time

# fetch_openml is a function in scikit-learn used to download datasets from OpenML
# A public repository of machine learning datasets.

# Load MNIST dataset
print("Loading MNIST dataset...")
X, y = fetch_openml('mnist_784', version=1, return_X_y=True, as_frame=False)
print("Dataset loaded")
# Normalize the data
X = X / 255.0

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


#train the model
#train the model
print("Training the model...")
start_time = time.time()
model = LogisticRegression(max_iter=100,multi_class='multinomial', solver='saga', n_jobs=-1) #added n_jobs=-1 as a possible fix
model.fit(x_train, y_train)
print(f"Training completed in {time.time() - start_time:.2f} seconds")

# make prediction
print("Making predictions...")
y_pred = model.predict(x_test)

#calculate and print accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"\nAccuracy: {accuracy:.4f}")



# print classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))



#visualize some prediction
def plot_prediction(x_test, y_test, y_pred, index):
  fig, axes = plt.subplots(2, 5, figsize=(12, 6))
  axes = axes.ravel()

  for idx , ax in zip(index, axes):
    ax.imshow(x_test[idx].reshape(28, 28), cmap='gray')
    ax.set_title(f"True: {y_test[idx]}, Predicted: {y_pred[idx]}")
    ax.axis('off')


  plt.tight_layout()
  plt.show()



  #show some example prediction
print("\nDisplaying some example predictions...")
index = np.random.randint(0, len(x_test), 10)
plot_prediction(x_test, y_test, y_pred, index)


import joblib
joblib.dump(model," mnist_liner_classifier.joblib")
print("\nModel saved as 'mnist_liner_classifier.joblib'")